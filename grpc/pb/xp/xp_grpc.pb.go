// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package xp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// XpClient is the client API for Xp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type XpClient interface {
	AddUserGlobalXp(ctx context.Context, in *AddGlobalXp, opts ...grpc.CallOption) (*LevelUp, error)
}

type xpClient struct {
	cc grpc.ClientConnInterface
}

func NewXpClient(cc grpc.ClientConnInterface) XpClient {
	return &xpClient{cc}
}

func (c *xpClient) AddUserGlobalXp(ctx context.Context, in *AddGlobalXp, opts ...grpc.CallOption) (*LevelUp, error) {
	out := new(LevelUp)
	err := c.cc.Invoke(ctx, "/Xp/AddUserGlobalXp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XpServer is the server API for Xp service.
// All implementations must embed UnimplementedXpServer
// for forward compatibility
type XpServer interface {
	AddUserGlobalXp(context.Context, *AddGlobalXp) (*LevelUp, error)
	mustEmbedUnimplementedXpServer()
}

// UnimplementedXpServer must be embedded to have forward compatible implementations.
type UnimplementedXpServer struct {
}

func (UnimplementedXpServer) AddUserGlobalXp(context.Context, *AddGlobalXp) (*LevelUp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserGlobalXp not implemented")
}
func (UnimplementedXpServer) mustEmbedUnimplementedXpServer() {}

// UnsafeXpServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to XpServer will
// result in compilation errors.
type UnsafeXpServer interface {
	mustEmbedUnimplementedXpServer()
}

func RegisterXpServer(s grpc.ServiceRegistrar, srv XpServer) {
	s.RegisterService(&Xp_ServiceDesc, srv)
}

func _Xp_AddUserGlobalXp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGlobalXp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XpServer).AddUserGlobalXp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Xp/AddUserGlobalXp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XpServer).AddUserGlobalXp(ctx, req.(*AddGlobalXp))
	}
	return interceptor(ctx, in, info, handler)
}

// Xp_ServiceDesc is the grpc.ServiceDesc for Xp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Xp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Xp",
	HandlerType: (*XpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUserGlobalXp",
			Handler:    _Xp_AddUserGlobalXp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "xp.proto",
}
